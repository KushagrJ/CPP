a = a + b, b = a - b, a = a - b; should not be used for swapping, as the result
may overflow.

For integers, (x & 1) evaluates to 1 if x is odd.

For unsigned integers, ((x / y) + (x % y != 0)) does ceiling division.
Another approach is to use ((x + y - 1) / y), but this may cause an overflow.
So, this approach should only be used when it is guaranteed that overflow will
not occur.

To sort an array when the range of inputs is known beforehand, a simplified
version of counting sort can be used.
For eg., to sort an array consisting only of 0's, 1's and 2's, the number of
0's, 1's and 2's in the input array can be counted (say n0, n1 and n2). Then, in
the array, the first n0 elements can be assigned 0, the next n1 elements can be
assigned 1 and the final n2 elements can be assigned 2.

For unsigned integers, (a + b) is divisible by k if and only if a and b are both
divisible by k, or if ((a % k) + (b % k)) is equal to k.

If it is given that an array is sorted, then to know whether the array is sorted
in increasing or decreasing order, only the first and last elements of the array
need to be compared.

To apply binary search on an infinite array, use that 'doubling the search
space' method to obtain a value of hi.

Depending upon the problem, the type of binary search should be chosen, i.e.
whether to compare mid for equality in every iteration, or to let lo eventually
become equal to hi, giving the target.

Binary search helps in certain types of optimization problems, such as those in
which (i) it can easily be checked whether a given value corresponds to a
possible solution and (ii) if a given value corresponds to a possible solution,
then every value less than this value or greater than this value also
corresponds to a possible solution.

